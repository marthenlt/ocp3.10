---
- name: Copy master .kube/config to bastion so that bastion can use system:admin user 
  hosts: masters[0]
  vars:
    version: 1
  tasks:
    - name: Copy .kube/config file
      fetch:
        src: /root/.kube/config
        dest: /root/.kube/config
        flat: yes

- name: Post check - oc get nodes
  hosts: localhost
  tasks:
    - name: oc get nodes
      command: "oc get nodes -o wide --show-labels"

- name: Post check - oc get pods
  hosts: localhost
  tasks:
    - name: oc get pods
      command: "oc get pods -o wide --all-namespaces"

- name: Check Etcd service in all masters..
  hosts: masters
  tasks:
    - name: Check etcd service
      command: "systemctl status etcd"

- name: Create default project template where it stores LimitRange and isolated networkpolicy 
  hosts: localhost
  tasks:
    - name: Create default project template
      command: "oc create -f ../templates/default_project_template.yaml -n default"

- name: Configure master-config.yaml to use the new template 
  hosts: masters
  tasks:
    - name: Modify master-config.yaml in all masters..
      replace:
        path: /etc/origin/master/master-config.yaml
        regexp: "  projectRequestTemplate: ''"
        replace:  "  projectRequestTemplate: 'default/project-request'"

- name: Restart atomic-openshift-master-api and atomic-openshift-master-controller services 
  hosts: masters
  tasks:
    - name: Stop services
      command: "{{ item }}"
      with_items:
        - "systemctl stop atomic-openshift-master-api"
        - "systemctl stop atomic-openshift-master-controllers"

    - name: Start services
      command: "{{ item }}"
      with_items:
        - "systemctl start atomic-openshift-master-api"
        - "systemctl start atomic-openshift-master-controllers"

- name: Configure NFS server 
  hosts: nfs
  tasks:
    - name: Create directories in NFS
      script: ../scripts/pvs_create_directories_in_nfs.sh

    - name: Restart nfs service
      shell: systemctl restart nfs-server

- name: Create 25 PV files with 5G size
  hosts: localhost
  tasks:
    - name: Create definitions
      script: ../scripts/pv5G.sh

- name: Create 25 PVs files with 10G size
  hosts: localhost
  tasks:
    - name: Create definitions
      script: ../scripts/pv10G.sh

- name: Create all PVs by loading it from the PV files
  hosts: localhost
  tasks:
    - name: Load all PV files under ../pvs/ folder in bastion
      script: ../scripts/load_pvs.sh

- name: Fix NFS Persistent Volume Recycling
  hosts: nodes
  tasks:
    - name: Docker pull
      command: "docker pull registry.access.redhat.com/openshift3/ose-recycler:latest"
    - name: Docker tag
      command: "docker tag registry.access.redhat.com/openshift3/ose-recycler:latest registry.access.redhat.com/openshift3/ose-recycler:v3.9.30"

# Requirement 2.1 -  Deploy nodejs-mongo-persistent application
- name: Deploy a sample app nodejs-mongo-persistent
  hosts: localhost
  tasks:
    - name: create a new project
      command: "oc new-project smoke-test"
    - name: create the nodejs mongodb persistent app
      command: "oc new-app nodejs-mongo-persistent -n smoke-test"
    - name: check build pods
      command: "oc get pods -n smoke-test"
    - name: check the route
      command: "oc get route -n smoke-test"


# Requirement 2.4 - CI/CD
- name: Deploy Jenkins persistence
  hosts: localhost
  tasks:
    - name: create a new CICD project
      command: "oc new-project cicd"

    - name: since the default NetworkPolicy will disable all traffic, we need to make an exceptions for Jenkins to run. JNLP is using port 50000, Jenkins itself is using port 8080, but I will also open standard port 80 and 443.
      command: "oc create -f ../templates/allow-jenkins-traffic-for-cicd-namespace.yaml -n cicd"

    - name: create a new Jenkins with persistent app
      command: "oc new-app jenkins-persistent -p ENABLE_OAUTH=true -p MEMORY_LIMIT=2Gi -p VOLUME_CAPACITY=4Gi -n cicd"

    - name: Wait until Jenkins is up
      shell: oc get pods | grep jenkins | grep -v deploy | awk '{ print $2 }'
      register: jenkins_result
      until: jenkins_result.stdout == '1/1'
      retries: 180
      delay: 3

    - name: Give more buffer of 2 minutes interval for Jenkins to properly ready to receive requests 
      wait_for: timeout=120
      delegate_to: localhost

    - name: create the buildconfig pipeline 
      command: "oc create -f ../templates/jenkins-buildconfig.yaml -n cicd"

    - name: deploy the openshift-tasks by executing the BuildConfig tasks-pipeline, it will then download openshift-tasks from this github repo https://github.com/marthenlt/openshift-tasks.git 
      command: "oc start-build tasks-pipeline -n cicd"

    - name: sleep for 5 minutes and continue with play to wait until Maven Slave Pod is up..
      wait_for: timeout=300
      delegate_to: localhost

    - name: Wait until Maven slave is finishing its build process. Please be patient as build process which invoking Maven slave might take sometimes to complete.
      shell: oc get pods | grep maven | awk '{ print $1 }'
      register: jenkins_slave_result
      until: jenkins_slave_result.stdout == ''
      retries: 300
      delay: 10

    - name: sleep for 5 minutes to wait until openshift-tasks Pod is up an running
      wait_for: timeout=300
      delegate_to: localhost

    - name: Checking openshift-tasks Pod to see whether it already run before setting up the HPA auto-scalling
      shell: oc get pods | grep tasks | grep -v build | awk '{ print $2 }'
      register: jenkins_slave_result
      until: jenkins_slave_result.stdout == '1/1'
      retries: 200
      delay: 4

    - name: implement HPA for openshift-tasks
      command: "oc autoscale dc/tasks-app --min 1 --max 5 --cpu-percent=80 -n cicd"


# Requirement 2.5 - admissionControl plugin
- name: admissionControl plugin sets specific limits per label (client/customer)
  hosts: masters
  tasks:
    - blockinfile:
        path: /etc/origin/master/master-config.yaml
        block: |3
               ProjectRequestLimit:
                 configuration:
                   apiVersion: v1
                   kind: ProjectRequestLimitConfig
                   limits:
                     - selector:
                         level: admin
                     - selector:
                         level: advanced
                       maxProjects: 10
                     - maxProjects: 2 
        insertafter: "pluginConfig"
        marker: "# {mark} admissionCOntrol plugin" 

- name: Restart atomic-openshift-master-api and atomic-openshift-master-controllers services
  hosts: masters
  tasks:
    - name: Stop services
      command: "{{ item }}"
      with_items:
        - "systemctl stop atomic-openshift-master-api"
        - "systemctl stop atomic-openshift-master-controllers"

    - name: Start services
      command: "{{ item }}"
      with_items:
        - "systemctl start atomic-openshift-master-api"
        - "systemctl start atomic-openshift-master-controllers"



# Requirement 2.5 - Clients will be named Alpha Corp and Beta Corp (client=alpha, client=beta), and a "client=common" for unspecified customers.
- name: Create 3 clients projects
  hosts: localhost
  tasks:
    - name: Create common project for unspecified customer -- node label has been pre-created in inventory file, we can modify this on the fly too using 'oc label node <NODE> <KEY>=<VALUE>'
      command: "oc adm new-project common-corp --display-name='nspecified Customers' --node-selector='client=common,env=app'"

    - name: Create Alpha corp project -- node label has been precreated 
      command: "oc adm new-project alpha-corp --display-name='Alpha Corp' --node-selector='client=aplha,env=app'"

    - name: Create Beta corp project -- node label has been precreated
      command: "oc adm new-project beta-corp --display-name='Beta Corp' --node-selector='client=beta,env=app'"


# Requirement 2.5 - 
#          Alpha Corp will have two users, Amy and Andrew
#          Beta Corp will have two users, Brian and Betty
- name: Create new users for Alpha Corp and Beta Corp
  hosts: localhost
  tasks:
    - name: Add users to openshift
      command: "oc create -f ../templates/{{ item }}.yaml"
      with_items:
        - "alpha-corp-Amy"
        - "alpha-corp-Andrew"
        - "beta-corp-Brian"
        - "beta-corp-Betty"

- name: Create groups for users based on their specific corp/project/namespace
  hosts: localhost
  tasks:
    - name: Create 2 groups, one for alpha and the other is beta
      command: "{{ item }}"
      with_items:
        - "oc adm groups new alpha Amy Andrew"
        - "oc adm groups new beta Brian Betty"

- name: Label all the groups
  hosts: localhost
  tasks:
    - name: Label the groups
      command: "{{ item }}"
      with_items:
        - "oc label group/alpha client=alpha"
        - "oc label group/beta client=beta"
    
- name: Set its policies
  hosts: localhost
  tasks:
    - name: Add policies
      command: "{{ item }}"
      with_items:
        - "oc adm policy add-role-to-group admin beta -n beta-corp"
        - "oc adm policy add-role-to-group admin alpha -n alpha-corp" 




